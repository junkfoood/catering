include:
  - template: Jobs/SAST.latest.gitlab-ci.yml # SAST
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml # Secrets scan
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml # Dependency scan

image: cimg/node:22.12.0-browsers

stages:
  - test # scanning
  - migrate
  - deploy
  - end-to-end-test # running integration tests
  - post

dependency_scanning:
  variables:
    GEMNASIUM_DB_LOCAL_PATH: /tmp/gemnasium-db-local
    GEMNASIUM_DB_UPDATE_DISABLED: "true"
    DS_EXCLUDED_PATHS: "$GEMNASIUM_DB_LOCAL_PATH, spec, test, tests, tmp" # Don't scan local copy of DB
  before_script:
    # Workaround for "exit status 128" error on GitLab Dedicated when retrieving latest gemnasium DB
    - git clone --branch ${GEMNASIUM_DB_REF_NAME} --depth 1 ${GEMNASIUM_DB_REMOTE_URL} ${GEMNASIUM_DB_LOCAL_PATH}

workflow:
  rules:
    # prevent pipeline from triggering on tag pushes
    - if: $CI_COMMIT_TAG
      when: never
      # only run on merge request pipelines and on main branch
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    # block everything else
    - when: never

# creates a db preview branch on neon and runs the migration on the preview branch
migrate_preview:
  stage: migrate
  except:
    - main
  script:
    # generate a random 6 digit id for the preview branch name
    - PREVIEW_BRANCH_ID=$(echo $CI_MERGE_REQUEST_ID | md5sum | head -c 6)
    - echo "PREVIEW_BRANCH_ID - $PREVIEW_BRANCH_ID"
    - CONNECTION_STRING=$(./cicd/create-neon-preview-branch.sh "preview-$PREVIEW_BRANCH_ID")
    - echo $CONNECTION_STRING > connection_string.txt
  artifacts:
    paths:
      - connection_string.txt

deploy_preview:
  stage: deploy
  except:
    - main
  script:
    - npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    # build the preview
    - npx vercel build --token=$VERCEL_TOKEN
    # deploy the preview
    - CONNECTION_STRING=$(cat connection_string.txt)
    - echo $CONNECTION_STRING
    - 'npx vercel deploy --prebuilt --target=preview --token=$VERCEL_TOKEN --env DATABASE_URL=${CONNECTION_STRING} -m gitlabDeployment=1 -m gitlabCommitRef="$CI_COMMIT_REF_NAME" | tee preview_url.txt'
    - echo "PREVIEW_URL=$(cat preview_url.txt)" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
    paths:
      - preview_url.txt
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $PREVIEW_URL

test_preview:
  stage: end-to-end-test
  needs: ["deploy_preview", "migrate_preview"]
  except:
    - main
  image: mcr.microsoft.com/playwright:v1.53.1-noble
  script:
    # run the tests
    - npm install -D @playwright/test --force
    - PREVIEW_URL=$(cat preview_url.txt)
    - echo $PREVIEW_URL
    - BASE_URL=${PREVIEW_URL} npx playwright test
  artifacts:
    when: always
    paths:
      - playwright-report
    expire_in: 2 days

migrate_staging:
  stage: migrate
  only:
    - main
  script:
    - export DATABASE_URL=${STAGING_DATABASE_URL}
    - npx prisma migrate deploy

deploy_staging:
  stage: deploy
  only:
    - main
  needs: ["migrate_staging"]
  environment:
    name: staging
  script:
    - npx vercel pull --yes --environment=staging --token=$VERCEL_TOKEN
    - npx vercel build --target=staging --token=$VERCEL_TOKEN
    - npx vercel deploy --prebuilt --target=staging --token=$VERCEL_TOKEN | tee staging_url.txt
  artifacts:
    paths:
      - staging_url.txt

migrate_production:
  stage: migrate
  only:
    - main
  when: manual
  allow_failure: false
  script:
    - export DATABASE_URL=${PRODUCTION_DATABASE_URL}
    - npx prisma migrate deploy

deploy_production:
  stage: deploy
  only:
    - main
  needs: ["migrate_production"]
  environment:
    name: production
    url: https://products.tech.gov.sg
  script:
    - npx vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - npx vercel build --prod --token=$VERCEL_TOKEN
    - npx vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN | tee prod_url.txt
  artifacts:
    paths:
      - prod_url.txt
