generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid(7))
  email     String    @unique
  role      UserRole  @default(USER)
  name      String
  activated Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(uuid(7))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid(7))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Caterer {
  id        String        @id @default(cuid())
  name      String        @unique
  imageFile String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  telephone String
  email     String
  menus     CatererMenu[]
}

model CatererMenu {
  id                          String               @id @default(cuid())
  code                        String               @unique
  type                        CatererMenuType
  notes                       String?
  pricePerPerson              Float
  minimumOrder                Int
  minimumOrderForFreeDelivery Int?
  deliveryFee                 Int?
  maxFriedItems               Int
  restrictedAreas             String[]
  discount_below_500          Float
  discount_500_2000           Float
  discount_2000_4000          Float
  discount_above_4000         Float
  catererID                   String
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @default(now()) @updatedAt
  caterer                     Caterer              @relation(fields: [catererID], references: [id], onDelete: Cascade)
  sections                    CatererMenuSection[]
}

model CatererMenuSection {
  id             String                   @id @default(cuid())
  menuID         String
  title          String
  description    String?
  selectionLimit Int
  order          Int
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @default(now()) @updatedAt
  menu           CatererMenu              @relation(fields: [menuID], references: [id], onDelete: Cascade)
  items          CatererMenuSectionItem[]
}

model CatererMenuSectionItem {
  id         String             @id @default(cuid())
  sectionID  String
  name       String
  order      Int
  vegetarian Boolean
  fried      Boolean
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt
  section    CatererMenuSection @relation(fields: [sectionID], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

enum CatererMenuType {
  SMALL_QTY_REFRESHMENT
  SMALL_QTY_BUFFET
  PACKED_MEALS
  TEA_RECEPTION
  BUFFET_1
  ETHNIC_FOOD_MALAY
  ETHNIC_FOOD_INDIAN
  BUFFET_2
  BBQ_BUFFET
  THEME_BUFFET
}
